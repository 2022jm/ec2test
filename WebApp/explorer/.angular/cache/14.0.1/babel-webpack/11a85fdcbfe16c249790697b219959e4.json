{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"ag-grid-angular\";\nimport * as i2 from \"@angular/common\";\nexport let TableComponent = /*#__PURE__*/(() => {\n  class TableComponent {\n    constructor() {\n      this.rowSelection = 'multiple';\n      this.defaultColDef = {\n        resizable: true,\n        filter: true,\n        sortable: true\n      };\n    }\n\n    ngOnInit() {\n      this.downloadCsvSubscription = this.exportCsv$.subscribe(data => {\n        // TODO: file names recive the whole object\n        const exportColumns = this.gridColumnApi.getAllColumns();\n        exportColumns.shift();\n        console.log(exportColumns);\n        const params = {\n          columnKeys: exportColumns,\n          processCellCallback: params => this.processCells(params)\n        };\n        this.gridApi.exportDataAsCsv(params);\n      });\n    }\n\n    ngOnDestroy() {\n      this.downloadCsvSubscription.unsubscribe();\n      this.visibleColumnsSubscription.unsubscribe();\n    }\n\n    processCells(params) {\n      const formateDateList = [\"DOB\", \"Date of sampling\"];\n      const posixToYearsList = [\"Age at blood draw\"];\n      const posixToHoursList = [\"Draw Time\", \"Total Processing Time\"]; // get the column name and formate the cell to export csv\n\n      const columnName = params.column.colDef.headerName;\n\n      if (formateDateList.includes(columnName)) {\n        return this.dateFormatter(params);\n      } else if (posixToYearsList.includes(columnName)) {\n        return this.POSIXToYears(params);\n      } else if (posixToHoursList.includes(columnName)) {\n        return this.POSIXToHours(params);\n      }\n\n      return params.value;\n    }\n\n    onGridReady(params) {\n      this.gridApi = params.api;\n      this.gridColumnApi = params.columnApi; // set the columns to fit in the table\n\n      this.gridApi.sizeColumnsToFit();\n      this.gridApi.setDomLayout('autoHeight'); // this subscription updates the columns to hide or show\n\n      this.visibleColumnsSubscription = this.visibleColumnsAfterUpdate$.subscribe(data => {\n        this.visibleColumns = data;\n\n        for (let col of this.visibleColumns) {\n          const column = this.gridColumnApi.getAllColumns().find(x => x.getColDef().headerName == col.name);\n          this.gridColumnApi.setColumnVisible(column, col.visible);\n        } // resize columns width to fit in the table\n\n\n        this.gridApi.sizeColumnsToFit();\n      });\n    }\n\n    showPagination() {\n      console.log(\"Current page: \", this.gridApi.paginationGetCurrentPage());\n      console.log(\"Total number of pages: \", this.gridApi.paginationGetTotalPages());\n      console.log(\"Page size: \", this.gridApi.paginationGetPageSize());\n    }\n\n    dateFormatter(params) {\n      let date = new Date(params.value);\n      return date.toISOString().substring(0, 10);\n    }\n\n    POSIXToYears(params) {\n      let date = new Date(params.value);\n      let baseDate = new Date(0);\n      return String(date.getFullYear() - baseDate.getFullYear());\n    }\n\n    POSIXToHours(params) {\n      let date = new Date(params.value);\n      return String(date.getHours() + \":\" + date.getMinutes());\n    }\n\n    checkboxSelection(params) {\n      // we put checkbox on the name if we are not doing grouping\n      return params.columnApi.getRowGroupColumns().length === 0;\n    }\n\n    headerCheckboxSelection(params) {\n      // we put checkbox on the name if we are not doing grouping\n      return params.columnApi.getRowGroupColumns().length === 0;\n    }\n\n  }\n\n  TableComponent.ɵfac = function TableComponent_Factory(t) {\n    return new (t || TableComponent)();\n  };\n\n  TableComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TableComponent,\n    selectors: [[\"app-table\"]],\n    inputs: {\n      data$: \"data$\",\n      colDef$: \"colDef$\",\n      exportCsv$: \"exportCsv$\",\n      visibleColumnsAfterUpdate$: \"visibleColumnsAfterUpdate$\"\n    },\n    decls: 3,\n    vars: 11,\n    consts: [[1, \"ag-theme-alpine\", 2, \"width\", \"100%\", \"height\", \"100%\", \"; font-size\", \"12px\", \"box-sizing\", \"border-box\", 3, \"rowData\", \"columnDefs\", \"defaultColDef\", \"pagination\", \"paginationPageSize\", \"suppressDragLeaveHidesColumns\", \"rowSelection\", \"gridReady\"]],\n    template: function TableComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ag-grid-angular\", 0);\n        i0.ɵɵlistener(\"gridReady\", function TableComponent_Template_ag_grid_angular_gridReady_0_listener($event) {\n          return ctx.onGridReady($event);\n        });\n        i0.ɵɵpipe(1, \"async\");\n        i0.ɵɵpipe(2, \"async\");\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"rowData\", i0.ɵɵpipeBind1(1, 7, ctx.data$))(\"columnDefs\", i0.ɵɵpipeBind1(2, 9, ctx.colDef$))(\"defaultColDef\", ctx.defaultColDef)(\"pagination\", true)(\"paginationPageSize\", 5)(\"suppressDragLeaveHidesColumns\", true)(\"rowSelection\", ctx.rowSelection);\n      }\n    },\n    dependencies: [i1.AgGridAngular, i2.AsyncPipe]\n  });\n  return TableComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}