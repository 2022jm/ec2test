{"ast":null,"code":"import { JwtHelperService } from \"@auth0/angular-jwt\";\nimport { BehaviorSubject, map } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nconst jwtHelper = new JwtHelperService();\nconst LOGIN_API = environment.apiUrl + 'auth/login';\nconst REFRESH_API = environment.apiUrl + 'auth/refresh';\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, router) {\n      this.http = http;\n      this.router = router;\n    }\n\n    login(user) {\n      return this.http.post(LOGIN_API, user).pipe(map(data => {\n        const jwtPayload = jwtHelper.decodeToken(data.accessToken);\n\n        if (jwtPayload) {\n          // save localUser data\n          this.setLocalUser(jwtPayload); // store token\n\n          localStorage.setItem('accessToken', data.accessToken);\n          localStorage.setItem('refreshToken', data.refreshToken); // TODO: change it\n\n          this.router.navigateByUrl('/home');\n        } else {// TODO: notify login error\n        }\n      }));\n    }\n\n    logout() {\n      localStorage.removeItem('accessToken');\n      localStorage.removeItem('refreshToken');\n      this.router.navigateByUrl('/login');\n    }\n\n    refreshToken() {\n      const refreshToken = localStorage.getItem('refreshToken');\n      return this.http.post(REFRESH_API, {\n        \"refreshToken\": refreshToken\n      }).pipe(map(data => {\n        const jwtPayload = jwtHelper.decodeToken(data.accessToken);\n\n        if (jwtPayload) {\n          this.setLocalUser(jwtPayload);\n          console.log(\"Token refreshed\", data.accessToken);\n          localStorage.setItem('accessToken', data.accessToken);\n        }\n      }));\n    }\n\n    setLocalUser(user) {\n      this.localUser$ = new BehaviorSubject(user);\n    }\n\n    static getToken() {\n      return localStorage.getItem('accessToken');\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}