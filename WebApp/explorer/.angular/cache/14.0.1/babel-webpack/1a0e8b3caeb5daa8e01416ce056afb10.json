{"ast":null,"code":"import { catchError, of, mergeMap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth/auth.service\";\nexport let AuthInterceptor = /*#__PURE__*/(() => {\n  class AuthInterceptor {\n    constructor(authService) {\n      this.authService = authService;\n      this.ignoreUrls = ['auth/login', 'auth/refresh'];\n    }\n\n    intercept(request, next) {\n      // Ignore login or refresh requests\n      if (this.validateUrl(request.url)) return next.handle(request);\n      return next.handle(request).pipe( // Error 401 Unauthorized means invalid accessToken\n      catchError(err => {\n        if (err.status == 401) {\n          // Refresh the accessToken\n          return this.authService.refreshToken().pipe( // Resend the request with the new token\n          mergeMap(() => next.handle(request.clone({\n            headers: request.headers.set(\"Authorization\", `Bearer ${localStorage.getItem('accessToken')}`)\n          }))), //\n          // TODO: Capture inbound requests, put them on hold if token is being refreshed\n          //\n          // On error logout\n          catchError(err => {\n            this.authService.logout();\n            return of(err);\n          }));\n        }\n\n        return of(err);\n      }));\n    } // Check if the request url routes are in the routes that has to be ignored\n\n\n    validateUrl(requestUrl) {\n      const positionIndicator = \"api/\";\n      const position = requestUrl.indexOf(positionIndicator);\n\n      if (position > 0) {\n        const requestPath = requestUrl.substr(position + positionIndicator.length);\n\n        if (this.ignoreUrls.includes(requestPath)) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n  }\n\n  AuthInterceptor.ɵfac = function AuthInterceptor_Factory(t) {\n    return new (t || AuthInterceptor)(i0.ɵɵinject(i1.AuthService));\n  };\n\n  AuthInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthInterceptor,\n    factory: AuthInterceptor.ɵfac\n  });\n  return AuthInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}