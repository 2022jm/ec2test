{"ast":null,"code":"import { BehaviorSubject, of, Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/biosample-table/biosample-table.service\";\nimport * as i2 from \"../../services/participant-table/participant-table.service\";\nimport * as i3 from \"../../services/phenotype-table/phenotype-table.service\";\nimport * as i4 from \"../../services/phenotype-relationship-table/phenotype-relationship-table.service\";\nimport * as i5 from \"../../services/ngs-rna-table/ngs-rna-table.service\";\nimport * as i6 from \"../../services/ngs-dna-table/ngs-dna-table.service\";\nimport * as i7 from \"../table-header/table-header.component\";\nimport * as i8 from \"../table/table.component\";\nexport let TableWrapperComponent = /*#__PURE__*/(() => {\n  class TableWrapperComponent {\n    constructor(biosampleTableService, participantTableService, phenotypeTableService, phenotypeRelationshipTableService, ngsRnaTableService, ngsDnaTableService) {\n      this.biosampleTableService = biosampleTableService;\n      this.participantTableService = participantTableService;\n      this.phenotypeTableService = phenotypeTableService;\n      this.phenotypeRelationshipTableService = phenotypeRelationshipTableService;\n      this.ngsRnaTableService = ngsRnaTableService;\n      this.ngsDnaTableService = ngsDnaTableService;\n      this.exportCsv$ = new Subject();\n      this.checkboxOptions = {\n        checkboxSelection: this.checkboxSelection,\n        headerCheckboxSelection: this.headerCheckboxSelection,\n        resizable: false,\n        width: 50\n      };\n      this.typesOfTables = {\n        \"participants\": {\n          title: \"Participant\",\n          observable$: this.participantTableService.participants$,\n          visibleColumns: [{\n            name: \"P.STALICLA ID\",\n            visible: true\n          }, {\n            name: \"External ID\",\n            visible: true\n          }, {\n            name: \"Gender\",\n            visible: true\n          }, {\n            name: \"Race\",\n            visible: true\n          }, {\n            name: \"Age\",\n            visible: true\n          }, {\n            name: \"DOB\",\n            visible: true\n          }, {\n            name: \"Category\",\n            visible: true\n          }],\n          // visibleColumns: [\n          //   \"P.STALICLA ID\", \"External ID\", \"Gender\", \"Race\", \"Age\", \"DOB\", \"Category\"\n          // ],\n          colDef: [this.checkboxOptions, {\n            field: \"internalId\",\n            headerName: \"P.STALICLA ID\"\n          }, {\n            field: \"externalId\",\n            headerName: \"External ID\"\n          }, {\n            field: \"gender.name\",\n            headerName: \"Gender\"\n          }, {\n            field: \"race.name\",\n            headerName: \"Race\"\n          }, {\n            field: \"age\",\n            headerName: \"Age\"\n          }, {\n            field: \"dateOfBirth\",\n            headerName: \"DOB\",\n            valueFormatter: this.dateFormatter\n          }, {\n            field: \"category.name\",\n            headerName: \"Category\"\n          }]\n        },\n        \"biosamples\": {\n          title: \"Biosample\",\n          observable$: this.biosampleTableService.biosamples$,\n          visibleColumns: [{\n            name: \"P.STALICLA ID\",\n            visible: true\n          }, {\n            name: \"Project name\",\n            visible: true\n          }, {\n            name: \"Biosample\",\n            visible: true\n          }, {\n            name: \"Bio source\",\n            visible: true\n          }, {\n            name: \"Location\",\n            visible: true\n          }, {\n            name: \"Temperature\",\n            visible: true\n          }, {\n            name: \"Tube Type\",\n            visible: true\n          }, {\n            name: \"Status\",\n            visible: true\n          }, {\n            name: \"Date of sampling\",\n            visible: true\n          }, {\n            name: \"Age at blood draw\",\n            visible: true\n          }, {\n            name: \"Draw Time\",\n            visible: true\n          }, {\n            name: \"Total Processing Time\",\n            visible: true\n          }],\n          colDef: [this.checkboxOptions, {\n            field: \"participant.internalId\",\n            headerName: \"P.STALICLA ID\"\n          }, {\n            field: \"biosample.study.name\",\n            headerName: \"Project name\"\n          }, {\n            field: \"biosample.biosampleId\",\n            headerName: \"Biosample\"\n          }, {\n            field: \"biosample.biosource.name\",\n            headerName: \"Bio source\"\n          }, {\n            field: \"biosample.location\",\n            headerName: \"Location\"\n          }, {\n            field: \"biosample.temperature.number\",\n            headerName: \"Temperature\"\n          }, {\n            field: \"biosample.tubeType.name\",\n            headerName: \"Tube Type\"\n          }, {\n            field: \"biosample.status.name\",\n            headerName: \"Status\"\n          }, {\n            field: \"dateOfSampling\",\n            headerName: \"Date of sampling\",\n            valueFormatter: this.dateFormatter\n          }, {\n            field: \"biosample.ageAtBloodDrawInMs\",\n            headerName: \"Age at blood draw\",\n            valueFormatter: this.POSIXToYears\n          }, {\n            field: \"biosample.drawAndProcessTimeInMs\",\n            headerName: \"Draw Time\",\n            valueFormatter: this.POSIXToHours\n          }, {\n            field: \"biosample.totalProcessingTimeInMs\",\n            headerName: \"Total Processing Time\",\n            valueFormatter: this.POSIXToHours\n          }]\n        },\n        \"phenotypes\": {\n          title: \"Phenotypes\",\n          observable$: this.phenotypeTableService.phenotypes$,\n          visibleColumns: [{\n            name: \"P.STALICLA ID\",\n            visible: true\n          }, {\n            name: \"Phenotype Name\",\n            visible: true\n          }, {\n            name: \"HPO\",\n            visible: true\n          }, {\n            name: \"UMLS\",\n            visible: true\n          }, {\n            name: \"Source\",\n            visible: true\n          }, {\n            name: \"Probability\",\n            visible: true\n          }, {\n            name: \"Observed\",\n            visible: true\n          }],\n          colDef: [this.checkboxOptions, {\n            field: \"participant.internalId\",\n            headerName: \"P.STALICLA ID\"\n          }, {\n            field: \"phenotype.name\",\n            headerName: \"Phenotype Name\"\n          }, {\n            headerName: \"HPO\",\n            valueGetter: this.hpoColumn\n          }, {\n            headerName: \"UMLS\",\n            valueGetter: this.umlsColumn\n          }, {\n            field: \"phenotypeSource.name\",\n            headerName: \"Source\"\n          }, {\n            field: \"probability\",\n            headerName: \"Probability\"\n          }, {\n            field: \"observed.name\",\n            headerName: \"Observed\"\n          }]\n        },\n        \"phenotypes-relationship\": {\n          title: \"Phen relationship\",\n          observable$: this.phenotypeRelationshipTableService.phenotypesRelationship$,\n          visibleColumns: [{\n            name: \"Phenotype 1\",\n            visible: true\n          }, {\n            name: \"Phenotype 2\",\n            visible: true\n          }],\n          colDef: [this.checkboxOptions, {\n            field: \"phenotypePhenotypeRelationship1.name\",\n            headerName: \"Phenotype 1\"\n          }, {\n            field: \"phenotypePhenotypeRelationship2.name\",\n            headerName: \"Phenotype 2\"\n          }]\n        },\n        \"ngs-rna\": {\n          title: \"NGS - RNA\",\n          observable$: this.ngsRnaTableService.ngsRna$,\n          visibleColumns: [{\n            name: \"Biosample ID\",\n            visible: true\n          }, {\n            name: \"Batch ID\",\n            visible: true\n          }, {\n            name: \"Spike Dilution\",\n            visible: true\n          }, {\n            name: \"Spike Mix\",\n            visible: true\n          }, {\n            name: \"Observed mean depth\",\n            visible: true\n          }],\n          colDef: [this.checkboxOptions, {\n            field: \"ngs.biosample.biosampleId\",\n            headerName: \"Biosample ID\"\n          }, {\n            field: \"ngs.batch.batchId\",\n            headerName: \"Batch ID\"\n          }, {\n            field: \"spikeDilution\",\n            headerName: \"Spike Dilution\"\n          }, {\n            field: \"spikeMix\",\n            headerName: \"Spike Mix\"\n          }, {\n            field: \"ngs.observedMeanDepth\",\n            headerName: \"Observed mean depth\"\n          }]\n        },\n        \"ngs-dna\": {\n          title: \"NGS - DNA\",\n          observable$: this.ngsDnaTableService.ngsDna$,\n          visibleColumns: [{\n            name: \"Biosample ID\",\n            visible: true\n          }, {\n            name: \"Batch ID\",\n            visible: true\n          }, {\n            name: \"Observed mean depth\",\n            visible: true\n          }, {\n            name: \"Genome referece\",\n            visible: true\n          }],\n          colDef: [this.checkboxOptions, {\n            field: \"ngs.biosample.biosampleId\",\n            headerName: \"Biosample ID\"\n          }, {\n            field: \"ngs.batch.batchId\",\n            headerName: \"Batch ID\"\n          }, {\n            field: \"ngs.observedMeanDepth\",\n            headerName: \"Observed mean depth\"\n          }, {\n            field: \"genomeReference\",\n            headerName: \"Genome reference\"\n          }]\n        }\n      };\n    }\n\n    ngOnInit() {\n      const typeDefinition = this.typesOfTables[this.type];\n\n      if (!typeDefinition) {\n        throw new Error(\"Table type don't exists\");\n      }\n\n      this.title = typeDefinition.title;\n      this.data$ = typeDefinition.observable$;\n      this.colDef$ = of(typeDefinition.colDef);\n      this.visibleColumns$ = new BehaviorSubject(typeDefinition.visibleColumns);\n      this.visibleColumnsAfterUpdate$ = new BehaviorSubject(typeDefinition.visibleColumns);\n      this.exportTablesAsCsvSubscription = this.exportTableAsCsv$.subscribe(_ => {\n        this.onExportCsvClicked(true);\n      });\n    }\n\n    ngOnDestroy() {\n      this.exportTablesAsCsvSubscription.unsubscribe();\n    }\n\n    onExportCsvClicked(exportCsv) {\n      this.exportCsv$.next(exportCsv);\n    }\n\n    onColumnSelectionChanged(columns) {\n      this.visibleColumnsAfterUpdate$.next(columns);\n    }\n\n    headerCheckboxSelection(params) {\n      // we put checkbox on the name if we are not doing grouping\n      return params.columnApi.getRowGroupColumns().length === 0;\n    }\n\n    checkboxSelection(params) {\n      // we put checkbox on the name if we are not doing grouping\n      return params.columnApi.getRowGroupColumns().length === 0;\n    }\n\n    dateFormatter(params) {\n      let date = new Date(params.value);\n      return date.toISOString().substring(0, 10);\n    }\n\n    POSIXToYears(params) {\n      let date = new Date(params.value);\n      let baseDate = new Date(0);\n      return String(date.getFullYear() - baseDate.getFullYear());\n    }\n\n    POSIXToHours(params) {\n      let date = new Date(params.value);\n      return String(date.getHours() + \":\" + date.getMinutes());\n    }\n\n    hpoColumn(params) {\n      const data = params.data.phenotype.ontologyRelationship;\n\n      for (let item of data) {\n        if (item.phenotypeOntology.ontologyType.name == \"HPO\") {\n          return item.phenotypeOntology.name;\n        }\n      }\n    }\n\n    umlsColumn(params) {\n      const data = params.data.phenotype.ontologyRelationship;\n\n      for (let item of data) {\n        if (item.phenotypeOntology.ontologyType.name == \"UMLS\") {\n          return item.phenotypeOntology.name;\n        }\n      }\n    }\n\n  }\n\n  TableWrapperComponent.ɵfac = function TableWrapperComponent_Factory(t) {\n    return new (t || TableWrapperComponent)(i0.ɵɵdirectiveInject(i1.BiosampleTableService), i0.ɵɵdirectiveInject(i2.ParticipantTableService), i0.ɵɵdirectiveInject(i3.PhenotypeTableService), i0.ɵɵdirectiveInject(i4.PhenotypeRelationshipTableService), i0.ɵɵdirectiveInject(i5.NgsRnaTableService), i0.ɵɵdirectiveInject(i6.NgsDnaTableService));\n  };\n\n  TableWrapperComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TableWrapperComponent,\n    selectors: [[\"app-table-wrapper\"]],\n    inputs: {\n      type: \"type\",\n      exportTableAsCsv$: \"exportTableAsCsv$\"\n    },\n    decls: 3,\n    vars: 6,\n    consts: [[\"id\", \"container\"], [3, \"title\", \"visibleColumns$\", \"exportCsvClicked\", \"columnsSelectionChanged\"], [3, \"data$\", \"colDef$\", \"exportCsv$\", \"visibleColumnsAfterUpdate$\"]],\n    template: function TableWrapperComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"app-table-header\", 1);\n        i0.ɵɵlistener(\"exportCsvClicked\", function TableWrapperComponent_Template_app_table_header_exportCsvClicked_1_listener($event) {\n          return ctx.onExportCsvClicked($event);\n        })(\"columnsSelectionChanged\", function TableWrapperComponent_Template_app_table_header_columnsSelectionChanged_1_listener($event) {\n          return ctx.onColumnSelectionChanged($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(2, \"app-table\", 2);\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"title\", ctx.title)(\"visibleColumns$\", ctx.visibleColumns$.asObservable());\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"data$\", ctx.data$)(\"colDef$\", ctx.colDef$)(\"exportCsv$\", ctx.exportCsv$.asObservable())(\"visibleColumnsAfterUpdate$\", ctx.visibleColumnsAfterUpdate$.asObservable());\n      }\n    },\n    dependencies: [i7.TableHeaderComponent, i8.TableComponent],\n    styles: [\"#container[_ngcontent-%COMP%]{overflow:hidden;border:0;border-radius:var(--border-radius);box-shadow:var(--box-shadow)}\"]\n  });\n  return TableWrapperComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}