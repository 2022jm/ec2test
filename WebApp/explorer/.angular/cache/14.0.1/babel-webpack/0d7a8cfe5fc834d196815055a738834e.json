{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"ag-grid-angular\";\nimport * as i2 from \"@angular/common\";\nexport class TableComponent {\n  constructor() {\n    this.rowSelection = 'multiple';\n    this.defaultColDef = {\n      resizable: true,\n      filter: true,\n      sortable: true\n    };\n  }\n\n  ngOnInit() {\n    this.downloadCsvSubscription = this.exportCsv$.subscribe(data => {\n      // TODO: file names recive the whole object\n      const exportColumns = this.gridColumnApi.getAllColumns();\n      console.log(this.gridColumnApi.getAllColumns().shift());\n      const params = {\n        columnKeys: this.gridColumnApi.getAllColumns(),\n        processCellCallback: params => this.processCells(params)\n      }; // this.gridApi.exportDataAsCsv(params);\n    });\n  }\n\n  ngOnDestroy() {\n    this.downloadCsvSubscription.unsubscribe();\n    this.visibleColumnsSubscription.unsubscribe();\n  }\n\n  processCells(params) {\n    const formateDateList = [\"DOB\", \"Date of sampling\"];\n    const posixToYearsList = [\"Age at blood draw\"];\n    const posixToHoursList = [\"Draw Time\", \"Total Processing Time\"]; // get the column name and formate the cell to export csv\n\n    const columnName = params.column.colDef.headerName;\n\n    if (formateDateList.includes(columnName)) {\n      return this.dateFormatter(params);\n    } else if (posixToYearsList.includes(columnName)) {\n      return this.POSIXToYears(params);\n    } else if (posixToHoursList.includes(columnName)) {\n      return this.POSIXToHours(params);\n    }\n\n    return params.value;\n  }\n\n  onGridReady(params) {\n    this.gridApi = params.api;\n    this.gridColumnApi = params.columnApi; // set the columns to fit in the table\n\n    this.gridApi.sizeColumnsToFit();\n    this.gridApi.setDomLayout('autoHeight'); // this subscription updates the columns to hide or show\n\n    this.visibleColumnsSubscription = this.visibleColumnsAfterUpdate$.subscribe(data => {\n      this.visibleColumns = data;\n\n      for (let col of this.visibleColumns) {\n        const column = this.gridColumnApi.getAllColumns().find(x => x.getColDef().headerName == col.name);\n        this.gridColumnApi.setColumnVisible(column, col.visible);\n      } // resize columns width to fit in the table\n\n\n      this.gridApi.sizeColumnsToFit();\n    });\n  }\n\n  showPagination() {\n    console.log(\"Current page: \", this.gridApi.paginationGetCurrentPage());\n    console.log(\"Total number of pages: \", this.gridApi.paginationGetTotalPages());\n    console.log(\"Page size: \", this.gridApi.paginationGetPageSize());\n  }\n\n  dateFormatter(params) {\n    let date = new Date(params.value);\n    return date.toISOString().substring(0, 10);\n  }\n\n  POSIXToYears(params) {\n    let date = new Date(params.value);\n    let baseDate = new Date(0);\n    return String(date.getFullYear() - baseDate.getFullYear());\n  }\n\n  POSIXToHours(params) {\n    let date = new Date(params.value);\n    return String(date.getHours() + \":\" + date.getMinutes());\n  }\n\n  checkboxSelection(params) {\n    // we put checkbox on the name if we are not doing grouping\n    return params.columnApi.getRowGroupColumns().length === 0;\n  }\n\n  headerCheckboxSelection(params) {\n    // we put checkbox on the name if we are not doing grouping\n    return params.columnApi.getRowGroupColumns().length === 0;\n  }\n\n}\n\nTableComponent.ɵfac = function TableComponent_Factory(t) {\n  return new (t || TableComponent)();\n};\n\nTableComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: TableComponent,\n  selectors: [[\"app-table\"]],\n  inputs: {\n    data$: \"data$\",\n    colDef$: \"colDef$\",\n    exportCsv$: \"exportCsv$\",\n    visibleColumnsAfterUpdate$: \"visibleColumnsAfterUpdate$\"\n  },\n  decls: 3,\n  vars: 11,\n  consts: [[1, \"ag-theme-alpine\", 2, \"width\", \"100%\", \"height\", \"100%\", \"; font-size\", \"12px\", \"box-sizing\", \"border-box\", 3, \"rowData\", \"columnDefs\", \"defaultColDef\", \"pagination\", \"paginationPageSize\", \"suppressDragLeaveHidesColumns\", \"rowSelection\", \"gridReady\"]],\n  template: function TableComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ag-grid-angular\", 0);\n      i0.ɵɵlistener(\"gridReady\", function TableComponent_Template_ag_grid_angular_gridReady_0_listener($event) {\n        return ctx.onGridReady($event);\n      });\n      i0.ɵɵpipe(1, \"async\");\n      i0.ɵɵpipe(2, \"async\");\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"rowData\", i0.ɵɵpipeBind1(1, 7, ctx.data$))(\"columnDefs\", i0.ɵɵpipeBind1(2, 9, ctx.colDef$))(\"defaultColDef\", ctx.defaultColDef)(\"pagination\", true)(\"paginationPageSize\", 5)(\"suppressDragLeaveHidesColumns\", true)(\"rowSelection\", ctx.rowSelection);\n    }\n  },\n  dependencies: [i1.AgGridAngular, i2.AsyncPipe],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJ0YWJsZS5jb21wb25lbnQuY3NzIn0= */\"]\n});","map":{"version":3,"mappings":"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","names":["TableComponent","constructor","resizable","filter","sortable","ngOnInit","downloadCsvSubscription","exportCsv$","subscribe","data","exportColumns","gridColumnApi","getAllColumns","console","log","shift","params","columnKeys","processCellCallback","processCells","ngOnDestroy","unsubscribe","visibleColumnsSubscription","formateDateList","posixToYearsList","posixToHoursList","columnName","column","colDef","headerName","includes","dateFormatter","POSIXToYears","POSIXToHours","value","onGridReady","gridApi","api","columnApi","sizeColumnsToFit","setDomLayout","visibleColumnsAfterUpdate$","visibleColumns","col","find","x","getColDef","name","setColumnVisible","visible","showPagination","paginationGetCurrentPage","paginationGetTotalPages","paginationGetPageSize","date","Date","toISOString","substring","baseDate","String","getFullYear","getHours","getMinutes","checkboxSelection","getRowGroupColumns","length","headerCheckboxSelection","selectors","inputs","data$","colDef$","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["D:\\System\\Desktop\\UPF\\4 Cuarto año\\Tercer Trimestre\\TFG\\stalicla-explorer\\src\\app\\browse\\components\\table\\table.component.ts","D:\\System\\Desktop\\UPF\\4 Cuarto año\\Tercer Trimestre\\TFG\\stalicla-explorer\\src\\app\\browse\\components\\table\\table.component.html"],"sourcesContent":["import { Component, OnInit, Input } from '@angular/core';\r\nimport { Observable, Subscription } from 'rxjs';\r\nimport {\r\n  ColDef,\r\n  ColumnApi,\r\n  ColumnResizedEvent,\r\n  CsvExportParams,\r\n  GridApi,\r\n  GridReadyEvent,\r\n} from 'ag-grid-community';\r\n\r\n@Component({\r\n  selector: 'app-table',\r\n  templateUrl: './table.component.html',\r\n  styleUrls: ['./table.component.css']\r\n})\r\nexport class TableComponent implements OnInit {\r\n\r\n\r\n  @Input() data$: Observable<any>;\r\n  @Input() colDef$: Observable<ColDef[]>;\r\n  @Input() exportCsv$: Observable<boolean>;\r\n  @Input() visibleColumnsAfterUpdate$: Observable<any>;\r\n\r\n  private gridApi!: GridApi;\r\n  private gridColumnApi!: ColumnApi;\r\n  public rowSelection = 'multiple';\r\n  public defaultColDef: ColDef = {\r\n    resizable: true,\r\n    filter: true,\r\n    sortable: true,\r\n  }\r\n  \r\n  private downloadCsvSubscription: Subscription;\r\n  private visibleColumnsSubscription: Subscription;\r\n  private visibleColumns;\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n    this.downloadCsvSubscription = this.exportCsv$.subscribe(data => {\r\n      // TODO: file names recive the whole object\r\n      const exportColumns = this.gridColumnApi.getAllColumns()!;\r\n      console.log(this.gridColumnApi.getAllColumns()!.shift());\r\n      const params:CsvExportParams = {\r\n        columnKeys: this.gridColumnApi.getAllColumns()!,\r\n        processCellCallback: (params: any): string => this.processCells(params)\r\n      }\r\n      // this.gridApi.exportDataAsCsv(params);\r\n    });\r\n    \r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.downloadCsvSubscription.unsubscribe();\r\n    this.visibleColumnsSubscription.unsubscribe();\r\n  }\r\n\r\n  processCells(params: any): string {\r\n    const formateDateList: string[] = [\"DOB\", \"Date of sampling\"];\r\n    const posixToYearsList: string[] = [\"Age at blood draw\"];\r\n    const posixToHoursList: string[] = [\"Draw Time\", \"Total Processing Time\"];\r\n    // get the column name and formate the cell to export csv\r\n    const columnName:string = params.column.colDef.headerName;\r\n    \r\n    if (formateDateList.includes(columnName)) {\r\n      return this.dateFormatter(params);\r\n    } else if (posixToYearsList.includes(columnName)) {\r\n      return this.POSIXToYears(params);\r\n    } else if(posixToHoursList.includes(columnName)) {\r\n      return this.POSIXToHours(params);\r\n    }\r\n\r\n    return params.value;\r\n  }\r\n\r\n  onGridReady(params: GridReadyEvent) {\r\n    this.gridApi = params.api;\r\n    this.gridColumnApi = params.columnApi;\r\n    \r\n    // set the columns to fit in the table\r\n    this.gridApi.sizeColumnsToFit();\r\n    this.gridApi.setDomLayout('autoHeight');\r\n\r\n    // this subscription updates the columns to hide or show\r\n    this.visibleColumnsSubscription = this.visibleColumnsAfterUpdate$.subscribe(data => {\r\n      this.visibleColumns = data;\r\n      for (let col of this.visibleColumns) {\r\n        const column = (this.gridColumnApi.getAllColumns()!.find(x => x.getColDef().headerName == col.name));\r\n        this.gridColumnApi.setColumnVisible(column!, col.visible);\r\n      }\r\n      // resize columns width to fit in the table\r\n      this.gridApi.sizeColumnsToFit();\r\n    })\r\n\r\n  }\r\n  \r\n  public showPagination() {\r\n    console.log(\"Current page: \", this.gridApi.paginationGetCurrentPage());\r\n    console.log(\"Total number of pages: \", this.gridApi.paginationGetTotalPages());\r\n    console.log(\"Page size: \",this.gridApi.paginationGetPageSize());\r\n\r\n  }\r\n\r\n  private dateFormatter(params) {\r\n    let date = new Date(params.value);\r\n    return date.toISOString().substring(0, 10)\r\n  }\r\n\r\n  private POSIXToYears(params) {\r\n    let date = new Date(params.value);\r\n    let baseDate = new Date(0);\r\n    return String(date.getFullYear() - baseDate.getFullYear());\r\n  }\r\n\r\n  private POSIXToHours(params) {\r\n    let date = new Date(params.value);\r\n    return String(date.getHours() + \":\" + date.getMinutes());\r\n  }\r\n\r\n  private checkboxSelection(params) {\r\n    // we put checkbox on the name if we are not doing grouping\r\n    return params.columnApi.getRowGroupColumns().length === 0;\r\n  };\r\n\r\n  private headerCheckboxSelection(params) {\r\n    // we put checkbox on the name if we are not doing grouping\r\n    return params.columnApi.getRowGroupColumns().length === 0;\r\n  };\r\n\r\n}\r\n","<!-- TODO: change the height to 260px; -->\r\n<ag-grid-angular\r\n    style=\"width: 100%; height: 100%;; font-size: 12px; box-sizing: border-box;\"\r\n    class=\"ag-theme-alpine\"\r\n    [rowData]=\"data$ | async\"\r\n    [columnDefs]=\"colDef$ | async\"\r\n    [defaultColDef]=\"defaultColDef\"\r\n    [pagination]=\"true\"\r\n    [paginationPageSize]=\"5\"\r\n    [suppressDragLeaveHidesColumns]=\"true\"\r\n    [rowSelection]='rowSelection'\r\n    (gridReady)=\"onGridReady($event)\"\r\n    >\r\n</ag-grid-angular>\r\n<!-- <button (click)=\"showPagination()\">button\r\n</button> -->"]},"metadata":{},"sourceType":"module"}