import { PrismaClient } from "@prisma/client";
import {
    ParticipantBiosample,
    Biosample,
    Temperature,
    Biosource,
    TubeType,
    Status,
    Study,
} from "@prisma/client";
import * as participantParser from "../parsers/participant.parser";
import * as biosampleParser from "../parsers/biosample.parser";

const prisma = new PrismaClient();

const participantBiosampleRepository = prisma.participantBiosample;
const biosampleRepository = prisma.biosample;
const biosourceRepository = prisma.biosource;
const tubeTypeRepository = prisma.tubeType;
const statusRepository = prisma.status;
const studyRepository = prisma.study; 
const temperatureRepository = prisma.temperature;

//########################
//#       Biosample      #
//########################

//------------------------
//-     Participant      -
//-      biosample       -
//------------------------

/**
 * Create multiple participant biosample in DB that comes from a csv input
 * 
 * @param  {participantBiosampleCsvRawRow[]} data
 */
export async function createMultipleParticipantBiosample(data: participantBiosampleCsvRawRow[]) {

    // parsed data
    const parsedBiosample = await biosampleParser.getParsedBiosample(data);
    const parsedParticipant = await participantParser.parseParticipant(data);

    console.log("parsedParticipant: ", parsedParticipant);
    console.log("parsedBiosample: ", parsedBiosample);

    // need to get the id of the participant and biosample generated by the DB
    let parsedParticipantBiosample = null;

    let createManyBiosample;
    let createManyParticipants;
    let createManyParticipantBiosample;
    try {
        // store biosample in DB
        try {
            createManyBiosample = await prisma.biosample.createMany({
                data: parsedBiosample,
            })
        } catch (err) {
            console.log(err);
            throw "Format error in biosample table"
        }
    
        // store participant in DB
        try {
            createManyParticipants = await prisma.participant.createMany({
                data: parsedParticipant,
            })
        } catch (err) {
            console.log(err);
            throw "Format error in participant table"
        }

        // get stored biosample ids
        const findManyBiosample = await prisma.biosample.findMany({
            where: {
                biosampleId: { in: parsedBiosample.map( x => {
                    return x.biosampleId;
                })}
            }
        })
        const biosampleIds = findManyBiosample.map( row => {return row.id});
    
        console.log("biosampleIds", biosampleIds);
        // get stored participant ids
        const findManyParticipant = await prisma.participant.findMany({
            where: {
                internalId: { in : parsedParticipant.map( x => {
                    return x.internalId;
                })}
            }
        });
        const participantIds = findManyParticipant.map( row => {return row.id});
        
        
        // parse participantBiomsaple
        parsedParticipantBiosample = await biosampleParser.getParsedParticipantBiosample(data, biosampleIds, participantIds);

        // store participantBiosample in DB
        try {
            createManyParticipantBiosample = await prisma.participantBiosample.createMany({
                data: parsedParticipantBiosample,
            });
        } catch (err) {
            console.log(err);
            throw "Format error in participant biosample table";
        }

        // TODO DEV: DELETE
        deleteMultipleParticipantBiosample(data, parsedBiosample, parsedParticipant, parsedParticipantBiosample);
        
        return {totalData: data.length, createManyBiosample, createManyParticipants, createManyParticipantBiosample}
    } catch (err) {
        // If error happens delete the generated data
        console.error("Error storing data in database");
        deleteMultipleParticipantBiosample(data, parsedBiosample, parsedParticipant, parsedParticipantBiosample);
        throw err;
    }
} 

/**
 * Delete multiple participant biosample, this function is used mainly if some error happen on input, to delete the data stored before error happen
 * 
 * @param  {participantBiosampleCsvRawRow[]} data
 * @param  {any} parsedBiosample
 * @param  {any} parsedParticipant
 * @param  {any} parsedParticipantBiosample
 */
export async function deleteMultipleParticipantBiosample(data: participantBiosampleCsvRawRow[],  parsedBiosample: any, parsedParticipant: any, parsedParticipantBiosample: any) {
    
    // delete by biosampleIdentification that is unique
    const deleteManyBiosample = await prisma.biosample.deleteMany({
        where: {
            biosampleId: { in : parsedBiosample.map( (x: any) => {
                return x.biosampleId;
            })}
        }
    })

    // delete by participantId that is unique
    const deleteManyParticipants = await prisma.participant.deleteMany({
        where: {
            internalId: { in : parsedParticipant.map( (x: any) => {
                return x.internalId;
            })}
        }
    });

    console.log("deleteMultipleParticipantBiosample", parsedParticipantBiosample);
    // delete by participantId and biosampleId
    const deleteManyParticipantBiosample = await prisma.participantBiosample.deleteMany({
        where: {
            participantId: { in : parsedParticipantBiosample.map( (x: any) => {
                return x.participantId;
            })},
            biosampleId: { in : parsedParticipantBiosample.map( (x: any) => {
                return x.biosampleId;
            })},
        }
    });
}

type TimeBetween = {
    drawTime: Date;
    processingStartTime: Date;
    freezingTime: Date;
    dateOfSampling: Date;
    dateOfBirth: Date;
}

type Hour = {
    hour: string;
}

type ParticipantBiosampleWithComputedFields<T> = T & {
    drawAndProcessTime: Hour;
    totalProcessingTime: Hour;
    ageAtBloodDraw: Hour;
}

function computeParticipantBiosampleWithComputedFields<ParticipantBiosample extends TimeBetween>(participantBiosample: any) {
    const biosample = participantBiosample.biosample;
    const participant = participantBiosample.participant;

    let ageAtBloodDraw: string | number = 'N/A'
    const ageAtBloodDrawDiff = participantBiosample.dateOfSampling.getTime() - participant.dateOfBirth.getTime();
    if (ageAtBloodDraw && ageAtBloodDrawDiff > 0) {
        ageAtBloodDraw = ageAtBloodDrawDiff;
    }
    
    participantBiosample.biosample = {
        ...participantBiosample.biosample,
        drawAndProcessTimeInMs: biosample.processingStartTime.getTime() - biosample.drawTime.getTime(),
        totalProcessingTimeInMs: biosample.freezingTime.getTime() - biosample.processingStartTime.getTime(),
        ageAtBloodDrawInMs: ageAtBloodDraw,
    }

    return participantBiosample;
}

export async function getParticipantBiosampleTab() {
    try {
        const result = await participantBiosampleRepository.findMany({
            select: {
                dateOfSampling: true,
                participant: {
                    select: {
                        id: true,
                        internalId: true,
                        externalId: true,
                        gender: true,
                        race: true,
                        dateOfBirth: true,
                        category: true,
                    }
                },
                biosample: {
                    select: {
                        id: true,
                        biosampleId: true,
                        biosource: true,
                        location: true,
                        temperature: true,
                        tubeType: true,
                        status: true,
                        study: true,
                        drawTime: true,
                        processingStartTime: true,
                        freezingTime: true,
                        processBy: true,
                        notes: true,
                    }
                }
            }
        });

        let list = [];
        for (let i = 0; i < result.length; i++) {
            list.push(computeParticipantBiosampleWithComputedFields(result[i]));
        }

        return list;
    } catch (err) {
        console.error("Error biosample service getParticipantBiosamplesTab");
        console.error(err);
        throw "Error biosample service getParticipantBiosamplesTab";
    }
}

/**
 * Get ParticipantBiosample with provided id
 * 
 * @param  {number} id
 * @returns {Promise<ParticipantBiosample>} ParticantBiosample data
 * @returns {Promise<null>} not found
 */
export async function getParticipantBiosample(id: number): Promise<ParticipantBiosample | null> {
    try {
        return await participantBiosampleRepository.findUnique({
            where: {
                id: id,
            },
        });
    } catch (err) {
        console.error("Error biosample service getParticipantBiosamples");
        console.error(err);
        throw "Error biosample service getParticipantBiosamples";
    }
}

/**
 * Get all ParticipantBiosample data
 * 
 * @returns {Promise<ParticipantBiosample>} all ParticipantBiosample data
 */
export async function getAllParticipantBiosamples(): Promise<ParticipantBiosample[]> {
    try {
        return await participantBiosampleRepository.findMany();
    } catch (err) {
        console.error("Error biosample service getAllParticipantBiosamples");
        console.error(err);
        throw "Error biosample service getAllParticipantBiosamples";
    }
}

/**
 * Create ParticipantBiosample with provided data
 * 
 * @param  {number} participantId
 * @param  {number} biosampleId
 * @param  {Date} dateOfSampling
 * @returns {Promise<ParticipatBiosample>} ParticipantBiosample created
 */
export async function createParticipantBiosample(participantId: number, biosampleId: number, dateOfSampling: Date): Promise<ParticipantBiosample> {
    try {
        return await participantBiosampleRepository.create({
            data: {
                participantId: participantId,
                biosampleId: biosampleId,
                dateOfSampling: dateOfSampling,
            },
        });
    } catch (err) {
        console.error("Error biosample service createParticipantBiosample");
        console.error(err);
        throw "Error biosample service createParticipantBiosample";
    }
}

/**
 * Update ParticipantBiosample with provided id and data
 * 
 * @param  {number} id
 * @param  {number} participantId
 * @param  {number} biosampleId
 * @param  {Date} dateOfSampling
 * @returns {Promise<ParticipantBiosample>} updated ParticipantBiosample
 */
export async function updateParticipantBiosample(id: number, participantId: number, biosampleId: number, dateOfSampling: Date): Promise<ParticipantBiosample> {
    try {
        return await participantBiosampleRepository.update({
            where: {
                id: id,
            },
            data: {
                participantId: participantId,
                biosampleId: biosampleId,
                dateOfSampling: dateOfSampling,
            },
        });
    } catch (err) {
        console.error("Error biosample service updateParticipantBiosample");
        console.error(err);
        throw "Error biosample service updateParticipantBiosample";
    }
}

/**
 * Delete ParticipantBiosample with provided id
 * 
 * @param  {number} id
 * @returns {Promise<ParticipantBiosample>} deleted ParticipantBiosample
 */
export async function deleteParticipantBiosample(id: number): Promise<ParticipantBiosample> {
    try {
        return await participantBiosampleRepository.delete({
            where: {
                id: id,
            },
        });
    } catch (err) {
        console.error("Error biosample service deleteParticipantBiosample");
        console.error(err);
        throw "Error biosample service deleteParticipantBiosample";
    }
}

//------------------------
//-      Biosample       -
//------------------------

/**
 * Get Biosample with provided id
 * 
 * @param  {number} id
 * @returns {Promise<Biosample>} Biosample data
 * @returns {Promise<null>} not found
 */
export async function getBiosample(id: number): Promise<Biosample | null> {
    try {
        return await biosampleRepository.findUnique({
            where: {
                id: id,
            },
        });
    } catch (err) {
        console.error("Error biosample service getBiosample");
        console.error(err);
        throw "Error biosample service getBiosample";
    }
}

/**
 * Get Biosample with provided biosampleIdentification
 * 
 * @param  {string} biosampleIdentification
 * @returns {Promise<Biosample>} Biosample data
 * @returns {Promise<null>} not found
 */
export async function getBiosampleByBiosampleIdentification(biosampleId: string): Promise<Biosample | null> {
    try {
        return await biosampleRepository.findUnique({
            where: {
                biosampleId: biosampleId,
            }
        })
    } catch (err) {
        console.error(err);
        throw "Error biosample service getBiosampleByBiosampleIdentification";
    }
}

/**
 * Get all Biosample data
 * 
 * @returns {Promise<Biosample>} all Biosample data
 */
export async function getAllBiosamples(): Promise<Biosample[]> {
    try {
        return await biosampleRepository.findMany();
    } catch (err) {
        console.error("Error biosample service getAllBiosamples");
        console.error(err);
        throw "Error biosample service getAllBiosamples";
    }
}

/**
 * Create Biosample with provided data
 * 
 * @param  {string} biosampleIdentification
 * @param  {number} biosourceId
 * @param  {number} location
 * @param  {number} tubeTypeId
 * @param  {number} studyId
 * @param  {string} drawTime
 * @param  {string} processingStartTime
 * @param  {string} freezingTime
 * @param  {string} processBy
 * @param  {string} notes
 * @param  {number} statusId
 * @param  {Date} statusDate
 * @returns {Promise<Biosample>} Biosample created
 */
export async function createBiosample(biosampleId: string, biosourceId: number, collaborator: string, location: string, temperatureId: number, tubeTypeId: number, studyId: number, drawTime: string, processingStartTime: string, freezingTime: string, processBy: string, notes: string, statusId: number, statusDate: Date): Promise<Biosample> {
    try {
        const drawTimeList = drawTime.split(":");
        const drawTimeProcess = new Date();
        drawTimeProcess.setUTCHours(Number(drawTimeList[0]), Number(drawTimeList[1]), 0, 0);

        const processingStartTimeList = processingStartTime.split(":");
        const processingStartTimeProcess = new Date();
        processingStartTimeProcess.setUTCHours(Number(processingStartTimeList[0]), Number(processingStartTimeList[1]), 0, 0);

        const freezingTimeList = freezingTime.split(":");
        const freezingTimeProcess = new Date();
        freezingTimeProcess.setUTCHours(Number(freezingTimeList[0]), Number(freezingTimeList[1]), 0, 0);

        
        return await biosampleRepository.create({
            data: {
                biosampleId: biosampleId,
                biosourceId: biosourceId,
                collaborator: collaborator,
                location: location,
                temperatureId: temperatureId,
                tubeTypeId: tubeTypeId,
                studyId: studyId,
                drawTime: drawTimeProcess,
                processingStartTime: processingStartTimeProcess,
                freezingTime: freezingTimeProcess,
                processBy: processBy,
                notes: notes,
                statusId: statusId,
                statusDate: statusDate,
            },
        });
    } catch (err) {
        console.error("Error biosample service createBiosample");
        console.error(err);
        throw "Error biosample service createBiosample";
    }
}

/**
 * Update Biosample with provided id and data
 * 
 * @param  {number} id
 * @param  {string} biosampleIdentification
 * @param  {number} biosourceId
 * @param  {number} location
 * @param  {number} tubeTypeId
 * @param  {number} studyId
 * @param  {string} drawTime
 * @param  {string} processingStartTime
 * @param  {string} freezingTime
 * @param  {string} processBy
 * @param  {string} notes
 * @param  {number} statusId
 * @param  {Date} statusDate
 * @returns {Promise<Biosample>} udpated Biosample
 */
export async function updateBiosample(id: number, biosampleId: string, biosourceId: number, location: string, tubeTypeId: number, studyId: number, drawTime: string, processingStartTime: string, freezingTime: string, processBy: string, notes: string, statusId: number, statusDate: Date): Promise<Biosample> {
    try {
        const drawTimeList = drawTime.split(":");
        const drawTimeProcess = new Date();
        drawTimeProcess.setUTCHours(Number(drawTimeList[0]), Number(drawTimeList[1]), 0, 0);

        const processingStartTimeList = processingStartTime.split(":");
        const processingStartTimeProcess = new Date();
        processingStartTimeProcess.setUTCHours(Number(processingStartTimeList[0]), Number(processingStartTimeList[1]), 0, 0);

        const freezingTimeList = freezingTime.split(":");
        const freezingTimeProcess = new Date();
        freezingTimeProcess.setUTCHours(Number(freezingTimeList[0]), Number(freezingTimeList[1]), 0, 0);

        
        return await biosampleRepository.update({
            where: {
                id: id,
            },
            data: {
                biosampleId: biosampleId,
                biosourceId: biosourceId,
                location: location,
                tubeTypeId: tubeTypeId,
                statusId: statusId,
                studyId: studyId,
                drawTime: drawTimeProcess,
                processingStartTime: processingStartTimeProcess,
                freezingTime: freezingTimeProcess,
                processBy: processBy,
                notes: notes,
                statusDate: statusDate,
            },
        });
    } catch (err) {
        console.error("Error biosample service updateBiosample");
        console.error(err);
        throw "Error biosample service updateBiosample";
    }
}

/**
 * Delete Biosample
 * 
 * @param  {number} id
 * @returns {Promise<Biosample>} deleted Biosample
 */
export async function deleteBiosample(id: number): Promise<Biosample> {
    try {
        return await biosampleRepository.delete({
            where: {
                id: id,
            },
        });
    } catch (err) {
        console.error("Error biosample service deleteBiosample");
        console.error(err);
        throw "Error biosample service deleteBiosample";
    }
}

//------------------------
//-     Temperature      -
//------------------------

/**
 * Get Temperature with provided id
 * 
 * @param  {number} id
 * @returns {Promise<Temperature>} Temperature data
 * @returns {Promise<null>} not found
 */
export async function getTemperature(id: number): Promise<Temperature | null> {
    try {
        return await temperatureRepository.findUnique({
            where: {
                id: id,
            }
        });
    } catch (err) {
        console.error("Error biosample service getTemperature");
        console.error(err);
        throw "Error biosample service getTemperature";
    }
}

/**
 * Get Temperature with provided number
 * 
 * @param  {number} number
 * @returns {Promise<Temperature>} Temperature data
 */
export async function getTemperatureByNumber(number: number): Promise<Temperature | null> {
    try {
        return await temperatureRepository.findUnique({
            where: {
                number: number,
            }
        })
    } catch (err) {
        console.error("Error biosample service getTemperatureByNumber");
        console.error(err);
        throw "Error biosample service getTemperatureByNumber";
    }
}

/**
 * Get all Temperatures
 * 
 * @returns {Promise<Temperature[]>} all Temperatures data
 */
export async function getAllTemperatures(): Promise<Temperature[]> {
    try {
        return await temperatureRepository.findMany();
    } catch (err) {
        console.error("Error biosample service getAllTemperature");
        console.error(err);
        throw "Error biosample service getAllTemperature";
    }
}

/**
 * Create Temperature with provided number
 * 
 * @param  {number} number
 * @returns {Promise<Temperature>} Temperature created
 */
export async function createTemperature(number: number): Promise<Temperature> {
    try {
        return await temperatureRepository.create({
            data: {
                number: number,
            }
        });
    } catch (err) {
        console.error("Error biosample service createTemperature");
        console.error(err);
        throw "Error biosample service createTemperature";
    }
}

/**
 * Create multiple Temperature
 * 
 * @param  {any[]} data list of temperature number
 * @returns {Promise<Temperature[]} all Temperature created
 */
export async function createMultipleTemperature(data: any[]) {
    try {
        const inputData = [];

        for (let value of data) {
            inputData.push({ number: value });
        }

        const result = await temperatureRepository.createMany({
            data: data
        })
        return result;
    } catch (err) {
        console.error("Error participant service createMultipleTemperature");
        console.error(err);
        throw "Error participant service createMultipleTemperature";
    }
}

/**
 * Update Temperature with the provided id and number
 * @param  {number} id
 * @param  {number} number
 * @returns {Promise<Temperature>} updated Temperature
 */
export async function updateTemperature(id: number, number: number): Promise<Temperature> {
    try {
        return await temperatureRepository.update({
            where: {
                id: id,
            },
            data: {
                number: number,
            }
        });
    } catch (err) {
        console.error("Error biosample service updateTemperature");
        console.error(err);
        throw "Error biosample service updateTemperature";
    }
}

/**
 * Delete Temperature with provided id
 * 
 * @param  {number} id
 * @returns {Promise<Temperature>} deleted Temperature
 */
export async function deleteTemperature(id: number): Promise<Temperature> {
    try {
        return await temperatureRepository.delete({
            where: {
                id: id,
            }
        });
    } catch (err) {
        console.error("Error biosample service ");
        console.error(err);
        throw "Error biosample service ";
    }
}

//------------------------
//-      Biosource       -
//------------------------

/**
 * Get Biosource with provided id
 * 
 * @param  {number} id
 * @returns {Promise<Biosource>} Biosource data
 * @returns {Promise<null>} not found
 */
export async function getBiosource(id: number): Promise<Biosource | null> {
    try {
        return await biosourceRepository.findUnique({
            where: {
                id: id,
            }
        });
    } catch (err) {
        console.error("Error biosample service getBiosource");
        console.error(err);
        throw "Error biosample service getBiosource";
    }
}

/**
 * Get Biosource with provided name
 * 
 * @param  {string} name
 * @returns {Promise<Biosource>} Biosource data
 * @returns {Promise<null>} not found
 */
export async function getBiosourceByName(name: string): Promise<Biosource | null> {
    try {
        return await biosourceRepository.findUnique({
            where: {
                name: name,
            }
        });
    } catch (err) {
        console.error("Error biosample service getBiosourceByName");
        console.error(err);
        throw "Error biosample service getBiosourceByName";
    }
}

/**
 * Get all Biosources
 * 
 * @returns {Promise<Biosource[]>} all Biosources data
 */
export async function getAllBiosources(): Promise<Biosource[]> {
    try {
        return await biosourceRepository.findMany();
    } catch (err) {
        console.error("Error biosample service getAllBiosources");
        console.error(err);
        throw "Error biosample service getAllBiosources";
    }
}

/**
 * Create Biosource
 * 
 * @param  {string} name
 * @returns {Promise<Biosource>} Biosource created
 */
export async function createBiosource(name: string): Promise<Biosource> {
    try {
        return await biosourceRepository.create({
            data: {
                name: name,
            }
        })
    } catch (err) {
        console.error("Error biosample service createBiosource");
        console.error(err);
        throw "Error biosample service createBiosource";
    }
}

/**
 * Create multiple Biosources
 * 
 * @param  {any[]} data list of biosource name
 * @returns {Promise<Biosource[]} all Biosources created
 */
export async function createMultipleBiosource(data: any[]) {
    try {
        const result = await biosourceRepository.createMany({
            data: data
        })
        return result;
    } catch (err) {
        console.error("Error participant service createMultipleBiosource");
        console.error(err);
        throw "Error participant service createMultipleBiosource";
    }
}

/**
 * Update Biosource with provided id and name
 * 
 * @param  {number} id
 * @param  {string} name
 * @returns {Promise<Biosource>} updated Biosource
 */
export async function updateBiosource(id: number, name: string): Promise<Biosource> {
    try {
        return await biosourceRepository.update({
            where: {
                id: id,
            },
            data: {
                name: name,
            }
        });
    } catch (err) {
        console.error("Error biosample service updateBiosource");
        console.error(err);
        throw "Error biosample service updateBiosource";
    }
}

/**
 * Delete Biosource with provided id
 * 
 * @param  {number} id
 * @returns {Promise<Biosource>} deleted Biosource
 */
export async function deleteBiosource(id: number): Promise<Biosource> {
    try {
        return await biosourceRepository.delete({
            where: {
                id: id,
            }
        });
    } catch (err) {
        console.error("Error biosample service deleteBiosource");
        console.error(err);
        throw "Error biosample service deleteBiosource";
    }
}

//------------------------
//-      Tube type       -
//------------------------

/**
 * Get TubeType with provided id
 * 
 * @param  {number} id
 * @returns {Promise<TubeType>} TubeType data
 * @returns {Promise<null>} not found
 */
export async function getTubeType(id: number): Promise<TubeType | null> {
    try {
        return await tubeTypeRepository.findUnique({
            where: {
                id: id,
            },
        });
    } catch (err) {
        console.error("Error biosample service getTubeType");
        console.error(err);
        throw "Error biosample service getTubeType";
    }
}

/**
 * Get TubeType with provided name
 * 
 * @param  {string} name
 * @returns {Promise<TubeType>} TubeType data
 * @returns {Promise<null>} not found
 */
export async function getTubeTypeByName(name: string): Promise<TubeType | null> {
    try {
        return await tubeTypeRepository.findUnique({
            where: {
                name: name,
            }
        });
    } catch (err) {
        console.error(err);
        throw "Error biosample service getTubeTypeByName";
    }
} 

/**
 * Get all TubeType data
 * @returns {Promise<TubeType[]>} all TubeType data
 */
export async function getAllTubeTypes(): Promise<TubeType[]> {
    try {
        return await tubeTypeRepository.findMany();
    } catch (err) {
        console.error("Error biosample service getAllTubeTypes");
        console.error(err);
        throw "Error biosample service getAllTubeTypes";
    }
}

/**
 * Create TubeType with provided data
 * 
 * @param  {string} name
 * @returns {Promise<TubeType>} TubeType created
 */
export async function createTubeType(name: string): Promise<TubeType> {
    try {
        return await tubeTypeRepository.create({
            data: {
                name: name,
            },
        });
    } catch (err) {
        console.error("Error biosample service createTubeType");
        console.error(err);
        throw "Error biosample service createTubeType";
    }
}

/**
 * Create multiple TubeType
 * 
 * @param  {any[]} data list of tubeType name
 * @returns {Promise<TubeType[]>} all TubeTypes created
 */
export async function createMultipleTubeType(data: any[]) {
    try {
        const result = await tubeTypeRepository.createMany({
            data: data
        })
        return result;
    } catch (err) {
        console.error("Error participant service createMultipleTubeType");
        console.error(err);
        throw "Error participant service createMultipleTubeType";
    }
}

/**
 * Update TubeType with provided id and data
 * 
 * @param  {number} id
 * @param  {string} name
 * @returns {Promise<TubeType>} updated TubeType
 */
export async function updateTubeType(id: number, name: string): Promise<TubeType> {
    try {
        return await tubeTypeRepository.update({
            where: {
                id: id,
            },
            data: {
                name: name,
            },
        });
    } catch (err) {
        console.error("Error biosample service updateTubeType");
        console.error(err);
        throw "Error biosample service updateTubeType";
    }
}

/**
 * Deleted TubeType
 * 
 * @param  {number} id
 * @returns {Promise<TubeType>} deleted TubeType
 */
export async function deleteTubeType(id: number): Promise<TubeType> {
    try {
        return await tubeTypeRepository.delete({
            where: {
                id: id,
            },
        });
    } catch (err) {
        console.error("Error biosample service deleteTubeType");
        console.error(err);
        throw "Error biosample service deleteTubeType";
    }
}

//------------------------
//-        Status        -
//------------------------

/**
 * Get Status with provided id
 * 
 * @param  {number} id
 * @returns {Promise<Status>} Status data
 * @returns {Promise<null>} not found
 */
export async function getStatus(id: number): Promise<Status | null> {
    try {
        return await statusRepository.findUnique({
            where: {
                id: id,
            },
        });
    } catch (err) {
        console.error("Error biosample service getStatus");
        console.error(err);
        throw "Error biosample service getStatus";
    }
}

/**
 * Get Status with provided Name
 * 
 * @param  {string} name
 * @returns {Promise<Status>} Status data
 * @returns {Promise<null>} not found
 */
export async function getStatusByName(name: string): Promise<Status | null> {
    try {
        return await statusRepository.findUnique({
            where: {
                name: name,
            }
        });
    } catch (err) {
        console.error(err);
        throw "Error biosample service getStatusByName";
    }
} 

/**
 * Get all Status data
 * 
 * @returns {Promise<Status[]>} all Status data
 */
export async function getAllStatus(): Promise<Status[]> {
    try {
        return await statusRepository.findMany();
    } catch (err) {
        console.error("Error biosample service getAllStatus");
        console.error(err);
        throw "Error biosample service getAllStatus";
    }
}

/**
 * Create Status with provided data
 * 
 * @param  {string} name
 * @returns {Promise<Status>} Status created
 */
export async function createStatus(name: string): Promise<Status> {
    try {
        return await statusRepository.create({
            data: {
                name: name,
            },
        });
    } catch (err) {
        console.error("Error biosample service createStatus");
        console.error(err);
        throw "Error biosample service createStatus";
    }
}

/**
 * Create multiple Status
 * 
 * @param  {any[]} data list of Status name
 * @returns {Promise<Status[]>} all Status created 
 */
export async function createMultipleStatus(data: any[]) {
    try {
        const result = await statusRepository.createMany({
            data: data
        })
        return result;
    } catch (err) {
        console.error("Error participant service createMultipleStatus");
        console.error(err);
        throw "Error participant service createMultipleStatus";
    }
}

/**
 * Update Status with provided id and data
 * 
 * @param  {number} id
 * @param  {string} name
 * @returns {Promise<Status[]>} updated Status
 */
export async function updateStatus(id: number, name: string): Promise<Status> {
    try {
        return await statusRepository.update({
            where: {
                id: id,
            },
            data: {
                name: name,
            },
        });
    } catch (err) {
        console.error("Error biosample service updateStatus");
        console.error(err);
        throw "Error biosample service updateStatus";
    }
}

/**
 * Delete Status
 * 
 * @param  {number} id
 * @returns {Promise<Status>} deleted Status
 */
export async function deleteStatus(id: number): Promise<Status> {
    try {
        return await statusRepository.delete({
            where: {
                id: id,
            },
        });
    } catch (err) {
        console.error("Error biosample service deleteStatus");
        console.error(err);
        throw "Error biosample service deleteStatus";
    }
}

//########################
//#        Study       #
//########################

//------------------------
//-        Study       -
//------------------------

/**
 * Get Study with provided id
 * 
 * @param  {number} id
 * @returns {Promise<Study>} Study data
 * @returns {Promise<null>} not found
 */
export async function getStudy(id: number): Promise<Study | null> {
    try {
        return await studyRepository.findUnique({
            where: {
                id: id,
            },
        });
    } catch (err) {
        console.error("Error biosample service getStudy");
        console.error(err);
        throw "Error biosample service getStudy";
    }
}

/**
 * Get Study with provided name
 * 
 * @param  {string} name
 * @returns {Promise<Study>} Study data
 * @returns {Promise<null>} not found
 */
export async function getStudyByName(name: string): Promise<Study | null> {
    try {
        return await studyRepository.findUnique({
            where: {
                name: name,
            }
        });
    } catch (err) {
        console.error(err);
        throw "Error biosample service getStudyByName";
    }
} 

/**
 * Get all Studies data
 * 
 * @returns {Promise<Study[]>} all Studies data
 */
export async function getAllStudies(): Promise<Study[]> {
    try {
        return await studyRepository.findMany();
    } catch (err) {
        console.error("Error biosample service getAllStudies");
        console.error(err);
        throw "Error biosample service getAllStudies";
    }
}

/**
 * Create Study with provided data
 * 
 * @param  {string} name
 * @returns {Promise<Study>} Study created
 */
export async function createStudy(name: string): Promise<Study> {
    try {
        return await studyRepository.create({
            data: {
                name: name,
            },
        });
    } catch (err) {
        console.error("Error biosample service createStudy");
        console.error(err);
        throw "Error biosample service createStudy";
    }
}

/**
 * Create multiple Study
 * @param  {string[]} data list of Study names
 * @returns {Promise<Study[]>} all Study created
 */
export async function createMultipleStudy (data: string[]) {
    try {
        const inputData = [];

        for (let value of data) {
            inputData.push({ name: value });
        }
        const result = await studyRepository.createMany({
            data: inputData
        })
        return result;
    } catch (err) {
        console.error("Error participant service createMultipleStudy");
        console.error(err);
        throw "Error participant service createMultipleStudy";
    }
}

/**
 * Update Study with provided id and data
 * 
 * @param  {number} id
 * @param  {string} name
 * @returns {Promise<Study>} updated Study
 */
export async function updateStudy(id: number, name: string): Promise<Study> {
    try {
        return await studyRepository.update({
            where: {
                id: id,
            },
            data: {
                name: name,
            },
        });
    } catch (err) {
        console.error("Error biosample service updateStudy");
        console.error(err);
        throw "Error biosample service updateStudy";
    }
}

/**
 * Delete Study with provided id
 * 
 * @param  {number} id
 * @returns {Promise<Study>} deleted Study
 */
export async function deleteStudy(id: number): Promise<Study> {
    try {
        return await studyRepository.delete({
            where: {
                id: id,
            },
        });
    } catch (err) {
        console.error("Error biosample service deleteStudy");
        console.error(err);
        throw "Error biosample service deleteStudy";
    }
}
