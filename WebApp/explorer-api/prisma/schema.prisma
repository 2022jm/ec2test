generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Batch {
    id                          Int                         @id @default(autoincrement())           @map("id")
    batchId                     String                      @db.VarChar                             @map("batch_id")
    deliveryDate                DateTime?                   @db.Date                                @map("delivery_date")
    studyId                     Int?                                                                @map("study_id")
    preprocessId                Int?                                                                @map("preprocess_id")
    bioinformaticPipelineId     Int?                                                                @map("bioinformatic_pipeline_id")
    bioinformaticPipeline       BioinformaticPipeline?      @relation(fields: [bioinformaticPipelineId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "bioinformatic_pipeline_id_fk")
    preprocess                  Preprocess?                 @relation(fields: [preprocessId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "preprocess_id_fk")
    study                       Study?                      @relation(fields: [studyId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "study_id_fk")
    ngs                         Ngs[]

    @@map("batch")
}

model BioinformaticPipeline {
    id          Int             @id @default(autoincrement())       @map("id")
    name        String          @unique @db.VarChar                 @map("name")
    batch       Batch[]

    @@map("bioinformatic_pipeline")
}

model Biosample {
    id                          Int             @id @default(autoincrement())       @map("id")
    biosampleId                 String          @unique @db.VarChar                 @map("biosample_id")
    collaborator                String?                                             @map("collaborator")
    biosourceId                 Int                                                 @map("biosource_id")
    location                    String?                                             @map("location")
    temperatureId               Int?                                                @map("temperature_id")
    tubeTypeId                  Int?                                                @map("tube_type_id")
    studyId                     Int?                                                @map("study_id")
    drawTime                    DateTime?       @db.Time                            @map("draw_time")
    processingStartTime         DateTime?       @db.Time                            @map("processing_start_time")
    freezingTime                DateTime?       @db.Time                            @map("freezing_time")
    processBy                   String?         @db.VarChar                         @map("process_by")
    notes                       String?         @db.VarChar                         @map("notes")
    statusId                    Int                                                 @map("status_id")
    statusDate                  DateTime        @db.Date                            @map("status_date")
    biosource                   Biosource       @relation(fields: [biosourceId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "biosource_id_fk")
    temperature                 Temperature?    @relation(fields: [temperatureId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "temperature_id_fk")
    study                       Study?          @relation(fields: [studyId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "study_id_fk")
    status                      Status          @relation(fields: [statusId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "status_id_fk")
    tubeType                    TubeType?       @relation(fields: [tubeTypeId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "tube_type_id_fk")
    ngs                         Ngs[]
    participantBiosample        ParticipantBiosample[]
    
    @@map("biosample")
}

model Biosource {
    id              Int                 @id @default(autoincrement())       @map("id")
    name            String              @unique @db.VarChar                 @map("name")
    biosample       Biosample[]
    
    @@map("biosource")
}

model Category {
    id              Int                 @id @default(autoincrement())       @map("id")
    name            String              @unique @db.VarChar                 @map("name")
    participant     Participant[]

    @@map("category")
}

model Center {
    id              Int                 @id @default(autoincrement())       @map("id")
    name            String              @unique @db.VarChar                 @map("name")
    preprocess      Preprocess[]

    @@map("center")
}

model FamilyRelationship {
    id                              Int                         @id @default(autoincrement())       @map("id")
    participant1Id                  Int                                                             @map("participant_1_id")
    participant2Id                  Int                                                             @map("participant_2_id")
    familyRelationshipTypeId        Int                                                             @map("family_relationship_type_id")
    familyRelationshipType          FamilyRelationshipType      @relation(fields: [familyRelationshipTypeId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "family_relationship_type_id_fk")
    participant1                    Participant                 @relation("family_relationship_participant_1_idToparticipant", fields: [participant1Id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "participant_1_id_fk")
    participant2                    Participant                 @relation("family_relationship_participant_2_idToparticipant", fields: [participant2Id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "participant_2_id_fk")
    
    @@unique([participant1Id, participant2Id])
    @@map("family_relationship")
}

model FamilyRelationshipType {
    id                      Int                         @id @default(autoincrement())       @map("id")
    name                    String                      @unique @db.VarChar                 @map("name")
    familyRelationship      FamilyRelationship[]

    @@map("family_relationship_type")
}

model GenomeReference {
    id                      Int         @id @default(autoincrement())       @map("id")
    ngsId                   Int                                             @map("ngs_id")
    genomeReference         String      @db.VarChar                         @map("genome_reference")
    ngs                Ngs          @relation(fields: [ngsId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "genome_reference_ngs_id_fk")

    @@map("genome_reference")
}

model LibraryPrepKit {
    id                      Int             @id @default(autoincrement())       @map("id")
    name                    String          @db.VarChar                         @map("name")
    chemVer                 String?         @db.VarChar                         @map("chem_ver")
    insertSize              Int?                                                @map("insert_size")
    preprocess              Preprocess[]

    @@map("library_prep_kit")
}

model Temperature {
    id              Int             @id @default(autoincrement())           @map("id")
    number          Int             @unique                                 @map("number")
    biosample       Biosample[]

    @@map("temperature")
}

model Ngs {
    id                      Int             @id @default(autoincrement())       @map("id")
    observedMeanDepth       String          @db.VarChar                         @map("observed_mean_depth")
    ngsTypeId               Int                                                 @map("ngs_type_id")
    biosampleId             Int                                                 @map("biosample_id")
    batchId                 Int                                                 @map("batch_id")
    batch                   Batch           @relation(fields: [batchId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "batch_id_fk")
    biosample               Biosample       @relation(fields: [biosampleId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "biosample_id_fk")
    ngsType                 NgsType         @relation(fields: [ngsTypeId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "ngs_type_id_fk")
    spikeList               Spike[]
    genomeReferenceList     GenomeReference[]

    @@map("ngs")
}

model NgsType {
    id                  Int                 @id @default(autoincrement())       @map("id")
    name                String              @unique @db.VarChar                 @map("name")
    ngs                 Ngs[]
    preprocess          Preprocess[]

    @@map("ngs_type")
}

model Observed {
    id                                      Int                                         @id @default(autoincrement())       @map("id")
    name                                    String                                      @unique @db.VarChar                 @map("name")
    participantPhenotypeRelationship        ParticipantPhenotypeRelationship[]

    @@map("observed")
}

model OntologyRelationship {
    id                          Int                     @id @default(autoincrement())           @map("id")
    phenotypeId                 Int                                                             @map("phenotype_id")
    phenotypeOntologyId         Int                                                             @map("phenotype_ontology_id")
    phenotype                   Phenotype               @relation(fields: [phenotypeId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "phenotype_id_fk")
    phenotypeOntology           PhenotypeOntology       @relation(fields: [phenotypeOntologyId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "phenotype_ontology_id_fk")

    @@map("ontology_relationship")
}

model OntologyType {
    id                          Int                     @id @default(autoincrement())       @map("id")
    name                        String                  @unique @db.VarChar                 @map("name")
    phenotypeOntology           PhenotypeOntology[]

    @@map("ontology_type")
}

model Participant {
    id                      Int                 @id @default(autoincrement())           @map("id")
    internalId              String              @unique @db.VarChar                     @map("internal_id")
    externalId              String              @unique @db.VarChar                     @map("external_id")
    genderId                Int                                                         @map("gender_id")
    raceId                  Int?                                                        @map("race_id")
    dateOfBirth             DateTime?           @db.Date                                @map("date_of_birth")
    categoryId              Int                                                         @map("category_id")
    category                Category            @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "category_id_fk")
    race                    Race?               @relation(fields: [raceId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "race_id_fk")
    gender                  Gender              @relation(fields: [genderId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "gender_id_fk")
    participantBiosample                    ParticipantBiosample[]
    familyRelationshipParticipant1          FamilyRelationship[]                       @relation("family_relationship_participant_1_idToparticipant")
    familyRelationshipParticipant2          FamilyRelationship[]                       @relation("family_relationship_participant_2_idToparticipant")
    participantPhenotypeRelationship        ParticipantPhenotypeRelationship[]

    @@map("participant")
}

model ParticipantBiosample {
    id                  Int         @id @default(autoincrement())       @map("id")
    participantId       Int                                             @map("participant_id")
    biosampleId         Int                                             @map("biosample_id")
    dateOfSampling      DateTime    @db.Date                            @map("date_of_sampling")

    biosample      Biosample   @relation(fields: [biosampleId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "biosample_id_fk")
    participant    Participant @relation(fields: [participantId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "participant_id_fk")

    @@map("participant_biosample")
}

model ParticipantPhenotypeRelationship {
    id                      Int                 @id @default(autoincrement())       @map("id")
    participantId           Int                                                     @map("participant_id")
    phenotypeId             Int                                                     @map("phenotype_id")
    phenotypeSourceId       Int                                                     @map("phenotype_source_id")
    probability             Float               @db.Real                            @map("probability")
    observedId              Int                                                     @map("observed_id")
    observed                Observed            @relation(fields: [observedId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "observed_id_fk")
    participant             Participant         @relation(fields: [participantId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "participant_id_fk")
    phenotype               Phenotype           @relation(fields: [phenotypeId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "phenotype_id_fk")
    phenotypeSource         PhenotypeSource     @relation(fields: [phenotypeSourceId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "phenotype_source_id_fk")

    @@map("participant_phenotype_relationship")
}

model Phenotype {
    id                                      Int                                     @id @default(autoincrement())       @map("id")
    name                                    String                                  @unique @db.VarChar                 @map("name")
    ontologyRelationship                    OntologyRelationship[]
    participantPhenotypeRelationship        ParticipantPhenotypeRelationship[]
    phenotypePhenotypeRelationship2         PhenotypePhenotypeRelationship[]        @relation("phenotypeTophenotype_phenotype_relationship_phenotype_2_id")
    phenotypePhenotypeRelationship1         PhenotypePhenotypeRelationship[]        @relation("phenotypeTophenotype_phenotype_relationship_phenotype_1_id")

    @@map("phenotype")
}

model PhenotypeOntology {
    id                      Int                         @id @default(autoincrement())       @map("id")
    name                    String                      @db.VarChar                         @map("name")
    ontologyTypeId          Int                                                             @map("ontology_type_id")
    ontologyType            OntologyType                @relation(fields: [ontologyTypeId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "ontology_type_id_fk")
    ontologyRelationship    OntologyRelationship[]

    @@unique([name, ontologyTypeId])
    @@map("phenotype_ontology")
}

model PhenotypePhenotypeRelationship {
    id                                  Int             @id @default(autoincrement())       @map("id")
    phenotype1Id                        Int                                                 @map("phenotype_1_id")
    phenotype2Id                        Int                                                 @map("phenotype_2_id")
    phenotypeTypeId                     Int                                                 @map("phenotype_type_id")
    phenotypePhenotypeRelationship1     Phenotype       @relation("phenotypeTophenotype_phenotype_relationship_phenotype_1_id", fields: [phenotype1Id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "phenotype_1_id_fk")
    phenotypePhenotypeRelationship2     Phenotype       @relation("phenotypeTophenotype_phenotype_relationship_phenotype_2_id", fields: [phenotype2Id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "phenotype_2_id_fk")
    phenotypeType                       PhenotypeType   @relation(fields: [phenotypeTypeId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "phenotype_type_id_fk")

    @@unique([phenotype1Id, phenotype2Id], map: "phenotype_phenotype_relations_phenotype_1_id_phenotype_2_id_key")
    @@map("phenotype_phenotype_relationship")
}

model PhenotypeSource {
    id                                  Int                                     @id @default(autoincrement())       @map("id")
    name                                String                                  @unique @db.VarChar                 @map("name")
    sourceTypeId                        Int                                                                         @map("source_type_id")
    sourceType                          SourceType                              @relation(fields: [sourceTypeId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "source_type_id_fk")
    participantPhenotypeRelationship    ParticipantPhenotypeRelationship[]

    @@map("phenotype_source")
}

model PhenotypeType {
    id                                  Int                                     @id @default(autoincrement())       @map("id")
    name                                String                                  @unique @db.VarChar                 @map("name")
    phenotypePhenotypeRelationship      PhenotypePhenotypeRelationship[]

    @@map("phenotype_type")
}

model Platform {
    id              Int          @id @default(autoincrement())      @map("id")
    name            String       @db.VarChar                        @map("name")
    chemVer         String?      @db.VarChar                        @map("chem_ver")
    insertSize      Int?                                            @map("insert_size")
    preprocess      Preprocess[]

    @@map("platform")
}

model Preprocess {
    id                  Int                 @id @default(autoincrement())       @map("id")
    centerId            Int?                                                    @map("center_id")
    ngsTypeId           Int?                                                    @map("ngs_type_id")
    libraryPrepKitId    Int?                                                    @map("library_prep_kit_id")
    platformId          Int?                                                    @map("platform_id")
    softwareId          Int?                                                    @map("software_id")
    center              Center?             @relation(fields: [centerId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "center_id_fk")
    libraryPrepKit      LibraryPrepKit?     @relation(fields: [libraryPrepKitId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "library_prep_kit_id_fk")
    ngsType             NgsType?            @relation(fields: [ngsTypeId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "ngs_type_id_fk")
    platform            Platform?           @relation(fields: [platformId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "platform_id_fk")
    software            Software?           @relation(fields: [softwareId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "software_id_fk")
    batch               Batch[]

    @@map("preprocess")
}

model Study {
    id              Int             @id @default(autoincrement())       @map("id")
    name            String          @unique @db.VarChar                 @map("name")
    batch           Batch[]
    biosample       Biosample[]

    @@map("study")
}

model Race {
    id              Int             @id @default(autoincrement())       @map("id")
    name            String          @unique @db.VarChar                 @map("name")
    participant     Participant[]

    @@map("race")
}

model Gender {
    id              Int             @id @default(autoincrement())       @map("id")
    name            String          @unique @db.VarChar                 @map("name")
    participant     Participant[]

    @@map("gender")
}

model Software {
    id              Int             @id @default(autoincrement())       @map("id")
    name            String          @unique @db.VarChar                 @map("name")
    preprocess      Preprocess[]

    @@map("software")
}

model SourceType {
    id                  Int                @id @default(autoincrement())        @map("id")
    name                String             @unique @db.VarChar                  @map("name")
    phenotypeSource     PhenotypeSource[]

    @@map("source_type")
}

model Spike {
    id                 Int         @id @default(autoincrement())        @map("id")
    ngsId              Int                                              @map("ngs_id")
    spikeDilution      String?     @db.VarChar                          @map("spike_dilution")
    spikeMix           String?     @db.VarChar                          @map("spike_mix")
    ngs                Ngs          @relation(fields: [ngsId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "spike_ngs_id_fk")

    @@map("spike")
}

model Status {
    id              Int             @id @default(autoincrement())       @map("id")
    name            String          @unique @db.VarChar                 @map("name")
    biosample       Biosample[]

    @@map("status")
}

model TubeType {
    id              Int             @id @default(autoincrement())       @map("id")
    name            String          @unique @db.VarChar                 @map("name")
    biosample       Biosample[]

    @@map("tube_type")
}

model User {
    id              Int             @id @default(autoincrement())       @map("id")
    email           String          @unique @db.VarChar                 @map("email")
    username        String          @unique @db.VarChar                 @map("username")
    name            String          @db.VarChar                         @map("name")
    surname         String          @db.VarChar                         @map("surname")
    password        String          @db.VarChar                         @map("password")
    isAdmin         Boolean         @db.Boolean                         @map("isAdmin")

    @@map("user")
}